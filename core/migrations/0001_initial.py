# Generated by Django 5.0 on 2024-12-01 22:53

import core.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('post_type', models.CharField(choices=[('ACHIEVEMENT', 'Achievement'), ('QUESTION', 'Question'), ('DISCUSSION', 'Discussion'), ('GUIDE', 'Guide')], default='DISCUSSION', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_posts', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.communitypost')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tasks', models.PositiveIntegerField(default=0)),
                ('monthly', models.PositiveIntegerField(default=0)),
                ('quests', models.PositiveIntegerField(default=0)),
                ('skippers', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(max_length=100)),
                ('coin_value', models.PositiveIntegerField(default=0)),
                ('point_value', models.PositiveIntegerField(default=0)),
            ],
            options={
                'indexes': [models.Index(fields=['item'], name='core_exchan_item_2b64b8_idx'), models.Index(fields=['coin_value'], name='core_exchan_coin_va_fd860c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('goal_type', models.CharField(choices=[('SHORT', 'Short Term'), ('LONG', 'Long Term'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly')], default='SHORT', max_length=10)),
                ('deadline', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed', models.BooleanField(default=False)),
                ('progress', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('xp_reward', models.PositiveIntegerField(default=100)),
                ('required_level', models.PositiveIntegerField(default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Mode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('level_required', models.PositiveIntegerField(default=0)),
                ('coin_cost', models.PositiveIntegerField(default=0)),
                ('duration_hours', models.PositiveIntegerField(default=0)),
            ],
            options={
                'indexes': [models.Index(fields=['level_required'], name='core_mode_level_r_32d685_idx'), models.Index(fields=['coin_cost'], name='core_mode_coin_co_5acd13_idx')],
            },
        ),
        migrations.CreateModel(
            name='Penalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('xp_penalty', models.PositiveIntegerField(default=0)),
                ('coin_penalty', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MEDIUM', 'Medium'), ('HARD', 'Hard')], default='EASY', max_length=10)),
                ('reward_xp', models.PositiveIntegerField(default=50)),
                ('reward_coins', models.PositiveIntegerField(default=25)),
                ('required_level', models.PositiveIntegerField(default=1)),
                ('deadline', models.DateField()),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='AVAILABLE', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ShopItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('product_type', models.CharField(choices=[('BOOK', 'Book'), ('AUDIO', 'Audio'), ('STICKER', 'Sticker')], default='BOOK', max_length=10)),
                ('digital_file', models.FileField(blank=True, null=True, upload_to='digital_products/')),
                ('points_required', models.PositiveIntegerField()),
                ('ad_required', models.BooleanField(default=False)),
            ],
            options={
                'indexes': [models.Index(fields=['product_type'], name='core_shopit_product_61b5a6_idx'), models.Index(fields=['points_required'], name='core_shopit_points__fc3d0c_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Hunter', max_length=100)),
                ('rank', models.CharField(choices=[('E', 'E-Rank'), ('D', 'D-Rank'), ('C', 'C-Rank'), ('B', 'B-Rank'), ('A', 'A-Rank'), ('S', 'S-Rank')], default='E', max_length=1, validators=[core.models.validate_rank])),
                ('level', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('experience', models.PositiveIntegerField(default=0)),
                ('coins', models.PositiveIntegerField(default=0)),
                ('personality_type', models.CharField(choices=[('achiever', 'Achiever'), ('explorer', 'Explorer'), ('socializer', 'Socializer'), ('competitor', 'Competitor')], default='achiever', max_length=20)),
                ('title', models.CharField(default='Novice Hunter', max_length=100)),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('notification_preferences', models.JSONField(default=dict)),
                ('strengths', models.JSONField(default=dict)),
                ('weaknesses', models.JSONField(default=dict)),
                ('daily_quest_limit', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('last_quest_completion', models.DateTimeField(blank=True, null=True)),
                ('quest_streak', models.PositiveIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserQuest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.quest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('MILESTONE', 'Milestone'), ('SKILL', 'Skill Mastery'), ('STREAK', 'Streak'), ('SPECIAL', 'Special')], default='MILESTONE', max_length=20)),
                ('xp_reward', models.PositiveIntegerField(default=0)),
                ('coin_reward', models.PositiveIntegerField(default=0)),
                ('icon', models.CharField(default='trophy', max_length=50)),
                ('unlocked_at', models.DateTimeField(blank=True, null=True)),
                ('progress', models.FloatField(default=0.0)),
                ('required_value', models.PositiveIntegerField(default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['achievement_type'], name='core_achiev_achieve_4530a9_idx'), models.Index(fields=['required_value'], name='core_achiev_require_c2c196_idx')],
            },
        ),
        migrations.CreateModel(
            name='Benefit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily', models.PositiveIntegerField(default=0)),
                ('skip', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user'], name='core_benefi_user_id_653dff_idx'), models.Index(fields=['daily'], name='core_benefi_daily_7f075e_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='communitypost',
            index=models.Index(fields=['post_type'], name='core_commun_post_ty_7e7a4c_idx'),
        ),
        migrations.AddIndex(
            model_name='communitypost',
            index=models.Index(fields=['created_at'], name='core_commun_created_c7ca9f_idx'),
        ),
        migrations.AddIndex(
            model_name='demand',
            index=models.Index(fields=['user'], name='core_demand_user_id_e4dcbb_idx'),
        ),
        migrations.AddIndex(
            model_name='demand',
            index=models.Index(fields=['tasks'], name='core_demand_tasks_6c1c31_idx'),
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['user', 'completed'], name='core_goal_user_id_09445c_idx'),
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['deadline'], name='core_goal_deadlin_dc7eee_idx'),
        ),
        migrations.AddIndex(
            model_name='penalty',
            index=models.Index(fields=['user'], name='core_penalt_user_id_23a00d_idx'),
        ),
        migrations.AddIndex(
            model_name='penalty',
            index=models.Index(fields=['xp_penalty'], name='core_penalt_xp_pena_84860e_idx'),
        ),
        migrations.AddIndex(
            model_name='quest',
            index=models.Index(fields=['difficulty'], name='core_quest_difficu_884e0d_idx'),
        ),
        migrations.AddIndex(
            model_name='quest',
            index=models.Index(fields=['required_level'], name='core_quest_require_2f90a8_idx'),
        ),
        migrations.AddIndex(
            model_name='quest',
            index=models.Index(fields=['created_at'], name='core_quest_created_27552a_idx'),
        ),
        migrations.AddIndex(
            model_name='quest',
            index=models.Index(fields=['status'], name='core_quest_status_19db7a_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['rank'], name='core_userpr_rank_8ccd4a_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['level'], name='core_userpr_level_5f73b6_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['personality_type'], name='core_userpr_persona_f610ea_idx'),
        ),
        migrations.AddIndex(
            model_name='userquest',
            index=models.Index(fields=['user'], name='core_userqu_user_id_efefa3_idx'),
        ),
        migrations.AddIndex(
            model_name='userquest',
            index=models.Index(fields=['quest'], name='core_userqu_quest_i_42241d_idx'),
        ),
    ]
